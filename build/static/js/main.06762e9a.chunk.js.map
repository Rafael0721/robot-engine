{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","className","alt","src","this","props","num","name","contact","Component","CardList","robots","map","robot","i","key","id","email","SearchBox","type","placeholder","onChange","searchFunction","Scroll","style","overflowY","border","height","padding","children","App","onSearch","e","setState","searchField","target","value","state","fetch","then","res","json","userData","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sOAgBeA,E,uKAZX,OACE,yBAAKC,UAAU,sDACb,yBAAKC,IAAI,WAAWC,IAAG,+BAA0BC,KAAKC,MAAMC,IAArC,cACvB,6BACE,4BAAKF,KAAKC,MAAME,MAChB,2BAAIH,KAAKC,MAAMG,e,GAPNC,aCqBJC,E,uKAnBJ,IACAC,EAAUP,KAAKC,MAAfM,OACP,OACE,yBAAKV,UAAU,MAEXU,EAAOC,KAAK,SAACC,EAAOC,GAClB,OAAO,kBAAC,EAAD,CACGC,IAAKD,EACLR,IAAKO,EAAMG,GACXT,KAAMM,EAAMN,KACZC,QAASK,EAAMI,gB,GAXdR,aCeRS,E,uKAbX,OACE,6BACE,2BACEjB,UAAU,YACVkB,KAAK,SACLC,YAAY,gBACZC,SAAUjB,KAAKC,MAAMiB,sB,GATPb,aCaTc,E,uKAXX,OACE,yBAAKC,MAAQ,CAACC,UAAW,SACXC,OAAQ,iBACRC,OAAQ,QACRC,QAAS,SACpBxB,KAAKC,MAAMwB,c,GAPCpB,aCuDNqB,G,8DAjDb,aAAc,IAAD,8BACX,gBAmBFC,SAAW,SAACC,GAEV,EAAKC,SAAU,CAACC,YAAaF,EAAEG,OAAOC,SApBtC,EAAKC,MAAQ,CACX1B,OAAQ,GACRuB,YAAa,IAJJ,E,gEAQO,IAAD,OACjBI,MAAM,8CACHC,MAAM,SAACC,GACN,OAAOA,EAAIC,UAEZF,MAAM,SAACG,GACN,EAAKT,SAAU,CAACtB,OAAQ+B,S,+BAWrB,IAAD,EAC0BtC,KAAKiC,MAA7B1B,EADF,EACEA,OAAQuB,EADV,EACUA,YACVS,EAAiBhC,EAAOiC,QAAQ,SAAC/B,GACrC,OAAOA,EAAMN,KAAKsC,cAAcC,SAASZ,EAAYW,kBAGvD,OAAQlC,EAAOoC,OAMb,yBAAK9C,UAAU,UACb,wBAAIA,UAAU,SAAd,cACA,kBAAC,EAAD,CAAWqB,eAAgBlB,KAAK2B,WAChC,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUpB,OAAQgC,MATtB,yBAAK1C,UAAU,eACb,wBAAIA,UAAU,SAAd,mB,GAlCUQ,cCKEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.06762e9a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Card extends Component{\r\n  render(){\r\n    return (\r\n      <div className=\"bg-light-blue tc dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n        <img alt=\"coverImg\" src={`https://robohash.org/${this.props.num}?200x200`} />\r\n        <div>\r\n          <h3>{this.props.name}</h3>\r\n          <p>{this.props.contact}</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from 'react';\r\nimport Card from './Card';\r\n\r\nclass CardList extends Component{\r\n  render(){\r\n    const {robots} = this.props;\r\n    return (\r\n      <div className=\"tc\">\r\n        {\r\n          robots.map( (robot, i) => {\r\n            return <Card\r\n                      key={i}\r\n                      num={robot.id}\r\n                      name={robot.name}\r\n                      contact={robot.email}\r\n                    />\r\n          })\r\n        }\r\n      </div >\r\n    )\r\n  }\r\n}\r\n\r\nexport default CardList;\r\n","import React, { Component } from 'react';\r\n\r\nclass SearchBox extends Component{\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n        <input\r\n          className=\"searchBox\"\r\n          type=\"search\"\r\n          placeholder=\"search robots\"\r\n          onChange={this.props.searchFunction}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, {Component} from 'react';\r\n\r\nclass Scroll extends Component{\r\n  render(){\r\n    return (\r\n      <div style={ {overflowY: 'scroll',\r\n                    border: '1px solid #000',\r\n                    height: '500px',\r\n                    padding: '30px'} }>\r\n        {this.props.children}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Scroll;\r\n","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport 'tachyons';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      robots: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then( (res) => {\n        return res.json();\n      } )\n      .then( (userData) => {\n        this.setState( {robots: userData} );\n      } );\n  }\n\n  // 在component元件內定的function以外的自訂function\n  // 必須用箭頭函式才能讓onsearch裡的this指向原來的scope 而不是input\n  onSearch = (e) => {\n    // console.log(e.target.value);\n    this.setState( {searchField: e.target.value} );\n  }\n\n  render(){\n    const { robots, searchField } = this.state;\n    const filteredRobots = robots.filter( (robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    } );\n\n    return !robots.length ? (\n      <div className=\"loading-box\">\n        <h1 className=\"title\">Loading...</h1>\n      </div>\n    ) :\n    (\n      <div className=\"App tc\">\n        <h1 className=\"title\">RoboEngine</h1>\n        <SearchBox searchFunction={this.onSearch} />\n        <Scroll>\n          <CardList robots={filteredRobots} />\n        </Scroll>\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}